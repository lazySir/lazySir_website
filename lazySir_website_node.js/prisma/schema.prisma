// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // 使用 mysql
  url      = env("DATABASE_URL") // 配置你的数据库连接字符串
}

model adminAccount {
  accountId String     @id @default(uuid()) // 生成 UUID 作为主键
  username  String     @unique // 用户名
  password  String // 密码
  adminInfo adminInfo? @relation // 一对一关系，adminInfo 是可选的

  @@map("adminAccount") // 映射到数据库中的表名
}

model adminInfo {
  accountInfoId         String                 @id @default(uuid()) // 主键，类型为字符串
  phone                 String?                @unique // 电话，允许为 null
  accountId             String                 @unique // 关联的 accountId，不能为 null
  age                   Int? // 年龄，允许为 null
  gender                Boolean? // 性别，使用布尔值表示
  email                 String?                @unique // 邮箱，允许为 null
  nickname              String? // 昵称，允许为 null
  address               String? // 地址，允许为 null
  state                 Boolean?               @default(true) // 用户状态
  isDelete              Boolean?               @default(false) // 删除标志，使用布尔值表示
  avatar                String?                @default("https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif?imageView2/1/w/80/h/80") // 头像
  createDate            DateTime?              @default(now()) // 创建时间，默认为当前时间
  updateDate            DateTime?              @default(now()) @updatedAt // 更新时间，默认为当前时间，并在更新时自动更改
  //1对1 
  adminAccount          adminAccount           @relation(fields: [accountId], references: [accountId], onDelete: Cascade) // 当用户被删除时，与之相关的 adminAccountInfo 也会被删除
  //多对多
  accountsAndRoles      accountsAndRoles[]
  // 作为通知接收人：一个管理员可以接收多个通知
  receivedNotifications notificationReceiver[] @relation("AdminToReceiver")

  // 作为通知发送人：一个管理员可以发送多个通知
  sentNotifications notification[] @relation("AdminToSender")

  // 与 task 表的关联
  createdTasks  task[]         @relation("TaskCreator")
  executedTasks taskExecutor[] // 任务执行人列表
  viewedTasks   taskViewer[] //任务授权人列表
  taskReports   taskReport[] // 任务报告列表

  @@index([accountId]) // 创建索引以加快根据 accountId 的查询速度
  @@map("adminInfo") // 映射到数据库中的表名
}

model adminMenu {
  menuId      String        @id @default(uuid()) // 菜单ID（主键）
  menuName    String // 菜单名称
  accountId   String // 创建人ID
  updateId    String? //更新人ID
  menuValue   String        @unique // 菜单值
  sortOrder   Float?        @default(99) // 菜单排序值
  parentId    String? // 上级菜单ID
  level       Int           @default(1) // 菜单级别
  path        String        @unique // 菜单路径
  state       Boolean       @default(true) // 状态
  createdDate DateTime      @default(now()) // 创建时间
  updatedDate DateTime      @default(now()) @updatedAt // 最后更新时间
  icon        String        @default("ep:adminMenu") // 图标
  description String? // 菜单描述
  parent      adminMenu?    @relation("MenuToMenu", fields: [parentId], references: [menuId])
  children    adminMenu[]   @relation("MenuToMenu")
  //多对多
  roles       RoleAndMenu[] // 与角色的关联

  @@index([parentId]) // 为 parentId 创建索引，加快查询父菜单的速度
  @@map("adminMenu") // 映射到数据库中的表名
}

// 角色表
model adminRole {
  roleId           String             @id @default(uuid()) // 角色ID（主键）
  roleName         String             @unique // 角色名称
  state            Boolean?           @default(true) // 状态
  createDate       DateTime           @default(now()) // 创建时间
  updateDate       DateTime           @default(now()) @updatedAt // 更新时间
  accountId        String // 操作人ID
  updateId         String?
  description      String? // 角色描述，可空
  //多对多
  RoleAndMenu      RoleAndMenu[] // 角色与菜单的关联
  //多对多
  accountsAndRoles accountsAndRoles[] //用户与角色关联
  RoleAndApi       RoleAndApi[]
}

// 用户与角色的连接表
model accountsAndRoles {
  accountsAndRolesID String    @id @default(uuid()) // 主键
  accountId          String
  roleId             String
  adminInfo          adminInfo @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
  roles              adminRole @relation(fields: [roleId], references: [roleId], onDelete: Cascade)
}

//菜单角色表
// 角色与菜单的中间表
model RoleAndMenu {
  RoleAndMenuID String    @id @default(uuid()) // 主键
  roleId        String // 角色ID
  menuId        String // 菜单ID
  role          adminRole @relation(fields: [roleId], references: [roleId], onDelete: Cascade) // 当角色被删除时，与之相关的RoleMenu也会被删除
  menu          adminMenu @relation(fields: [menuId], references: [menuId], onDelete: Cascade) // 当菜单被删除时，与之相关的RoleMenu也会被删除
}

model sysDictionary {
  dictionaryId String          @id @default(uuid()) // 字典ID（主键）
  key          String // 键名称
  value        String // 值
  level        Int             @default(1) // 等级，表示字典项的层级或优先级
  description  String? // 描述
  parentId     String? // 父级字典项ID，允许为空，表示顶级项
  parent       sysDictionary?  @relation("DictionaryHierarchy", fields: [parentId], references: [dictionaryId])
  children     sysDictionary[] @relation("DictionaryHierarchy")

  state       Boolean  @default(true) // 状态，表示启用或禁用
  accountId   String // 创建人ID
  updatedId   String // 更新人ID，允许为空
  createdDate DateTime @default(now()) // 创建时间
  updatedDate DateTime @default(now()) @updatedAt // 更新时间

  @@unique([key, level, parentId]) // 确保每个层级下的键名唯一
  @@map("sysDictionary") // 映射到数据库中的表名
}

//招聘管理表
model recruitment {
  recruitmentId String   @id @default(uuid()) // 主键，招聘ID
  title         String // 标题
  content       String?  @db.LongText // 内容，允许为空
  isHot         Boolean  @default(false) // 是否热招，默认为否
  accountId     String // 发布人ID
  updatedId     String // 更新人ID，允许为空
  state         Boolean  @default(true) // 状态，表示是否启用
  createDate    DateTime @default(now()) // 创建时间
  updateDate    DateTime @default(now()) @updatedAt // 更新时间
  addressId     String
  companyId     String
  categoryId    String
  degreeId      String
  experienceId  String

  @@map("recruitment") // 映射到数据库中的表名
}

model news {
  newsId           String   @id @default(uuid()) // 主键 
  title            String // 标题
  content          String?  @db.LongText // 内容，允许为空
  accountId        String // 发布人ID
  updatedId        String // 更新人ID，允许为空
  state            Boolean  @default(true) // 状态，表示是否启用
  createDate       DateTime @default(now()) // 创建时间
  updateDate       DateTime @default(now()) @updatedAt // 更新时间
  hits             Int      @default(0) // 点击量，默认为0
  hotSearchWordIds String? // 热搜词Id，允许为空 ，格式为json字符串，需要转换下
  companyId        String //公司Id

  @@map("news") // 映射到数据库中的表名
}

model enterpriseHonor {
  honorId     String   @id @default(uuid()) // 主键
  name        String // 荣誉名称
  description String?  @db.LongText // 荣誉描述，允许为空
  accountId   String // 创建人ID
  updatedId   String // 更新人ID，允许为空
  state       Boolean  @default(true) // 状态，表示是否启用
  createDate  DateTime @default(now()) // 创建时间
  updateDate  DateTime @default(now()) @updatedAt // 更新时间
  companyId   String //公司Id
  newsId      String //新闻ID

  @@map("enterpriseHonor") // 映射到数据库中的表名
}

//公告管理表
model announcement {
  announcementId String   @id @default(uuid()) // 主键
  title          String   @unique // 标题
  content        String?  @db.LongText // 内容，允许为空
  accountId      String // 发布人ID
  updatedId      String // 更新人ID，允许为空
  state          Boolean  @default(true) // 状态，表示是否启用
  createDate     DateTime @default(now()) // 创建时间
  updateDate     DateTime @default(now()) @updatedAt // 更新时间
  hits           Int      @default(0) // 点击量，默认为0
  companyId      String //公司Id
  file           String?  @db.LongText // 内容，允许为空//附件

  @@map("announcement") // 映射到数据库中的表名
}

model Api {
  apiId       String   @id @default(uuid()) // 主键
  apiName     String // 接口名称，如“获取用户列表”
  apiPath     String // 接口路径，如 /api/user/list
  methodId    String // 请求方法，如 GET、POST、PUT、DELETE
  description String?  @db.LongText // 通知内容// 接口描述
  groupId     String? // 所属分组，如“用户管理”
  state       Boolean  @default(true) // 是否启用
  requireAuth Boolean  @default(true) // 是否需要权限认证
  createDate  DateTime @default(now())
  updateDate  DateTime @default(now()) @updatedAt
  accountId   String // 创建人ID
  updateId    String? // 更新人ID

  // 多对多角色绑定
  roles RoleAndApi[]

  @@unique([apiPath, methodId]) // 组合唯一
  @@map("Api")
}

model RoleAndApi {
  RoleAndApiID String @id @default(uuid())
  roleId       String
  apiId        String

  role adminRole @relation(fields: [roleId], references: [roleId], onDelete: Cascade)
  api  Api       @relation(fields: [apiId], references: [apiId], onDelete: Cascade)

  @@unique([roleId, apiId]) // 避免重复绑定
  @@map("RoleAndApi")
}

//通知表单
model notification {
  notificationId String   @id @default(uuid()) // 主键：通知ID
  title          String // 通知标题
  content        String?  @db.LongText // 通知内容
  typeId         String // 通知类型（如 system / announcement / message）
  levelId        String // 优先等级
  senderId       String // 发送人账号（关联 adminInfo.accountId）
  createDate     DateTime @default(now()) // 创建时间
  state          Boolean  @default(true) // 是否启用

  // 发件人关联：一个通知对应一个管理员（发送者）
  sender adminInfo @relation("AdminToSender", fields: [senderId], references: [accountId], onDelete: Cascade)

  // 接收人关联：一个通知可被多个接收者接收
  receivers notificationReceiver[]

  @@map("notification") // 映射到数据库中的表名
}

//通知接受表
model notificationReceiver {
  notificationReceiverId String    @id @default(uuid()) // 主键
  notificationId         String // 通知ID
  receiverId             String // 接收人账号（关联 adminInfo.accountId）
  isRead                 Boolean   @default(false) // 是否已读
  readAt                 DateTime? // 阅读时间
  receiveDate            DateTime  @default(now()) // 接收时间

  // 与通知表的关联（一个通知对应多个接收记录）
  notification notification @relation(fields: [notificationId], references: [notificationId], onDelete: Cascade)

  // 与管理员的接收人关联（一个接收人可接收多个通知）
  receiver adminInfo @relation("AdminToReceiver", fields: [receiverId], references: [accountId], onDelete: Cascade)

  @@index([notificationId])
  @@index([receiverId])
  @@map("notificationReceiver")
}

model task {
  taskId     String         @id @default(uuid()) // 主键
  title      String // 任务标题
  taskName   String         @unique // 任务代号
  deadline   DateTime // 任务截止日期
  content    String         @db.LongText // 加密存储的任务内容
  statusId   String // 执行状态（如：未开启、进行中、已完成、解密等）
  creatorId  String // 创建人
  createDate DateTime       @default(now()) //创建时间
  updateDate DateTime       @default(now()) @updatedAt //更新时间
  // 关系
  creator    adminInfo      @relation("TaskCreator", fields: [creatorId], references: [accountId]) // 创建人
  executors  taskExecutor[] // 多执行人
  viewers    taskViewer[] // 授权查看人
  reports    taskReport[] // 汇报记录

  @@map("task")
}

//任务进度表
model taskReport {
  reportId   String    @id @default(uuid()) // 主键
  taskId     String // 关联任务
  reporterId String // 汇报人ID（一般为执行人）
  title      String // 汇报标题
  statusId   String // 汇报状态 已提交、完成、不处理、待处理
  content    String    @db.LongText // 汇报内容
  attachment String? // 附件链接，可选
  createDate DateTime  @default(now()) // 汇报时间
  updateDate DateTime  @default(now()) @updatedAt // 更新时间
  task       task      @relation(fields: [taskId], references: [taskId], onDelete: Cascade)
  reporter   adminInfo @relation(fields: [reporterId], references: [accountId], onDelete: Cascade)

  @@map("taskReport")
}

//任务执行人列表
model taskExecutor {
  id         String @id @default(uuid()) // 主键
  taskId     String // 任务 ID
  executorId String // 执行人 ID

  // 关系
  task     task      @relation(fields: [taskId], references: [taskId], onDelete: Cascade)
  executor adminInfo @relation(fields: [executorId], references: [accountId], onDelete: Cascade)

  @@unique([taskId, executorId]) // 防止重复分配
  @@map("taskExecutor")
}

//任务授权表
model taskViewer {
  id       String @id @default(uuid()) // 主键
  taskId   String // 任务 ID
  viewerId String // 授权查看人 ID

  // 关系
  task   task      @relation(fields: [taskId], references: [taskId], onDelete: Cascade)
  viewer adminInfo @relation(fields: [viewerId], references: [accountId], onDelete: Cascade)

  @@unique([taskId, viewerId])
  @@map("taskViewer")
}
